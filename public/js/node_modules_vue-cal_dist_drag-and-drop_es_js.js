"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["node_modules_vue-cal_dist_drag-and-drop_es_js"],{

/***/ "./node_modules/vue-cal/dist/drag-and-drop.es.js":
/*!*******************************************************!*\
  !*** ./node_modules/vue-cal/dist/drag-and-drop.es.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DragAndDrop: () => (/* binding */ DragAndDrop)\n/* harmony export */ });\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n/**\n  * vue-cal v4.10.2\n  * (c) 2025 Antoni Andre <antoniandre.web@gmail.com>\n  * @license MIT\n  */\nconst holdOverTimeout = 800;\nlet changeViewTimeout = null;\nlet pressPrevOrNextInterval = null;\nlet viewBeforeDrag = { id: null, date: null };\nlet viewChanged = false;\nlet cancelViewChange = true;\nlet dragOverCell = { el: null, cell: null, timeout: null };\nconst dragging = {\n  _eid: null,\n  fromVueCal: null,\n  toVueCal: null\n};\nconst DragAndDrop = class {\n  constructor(vuecal) {\n    __publicField(this, \"_vuecal\");\n    this._vuecal = vuecal;\n  }\n  /**\n   * When click and drag an event the cursor can be anywhere in the event,\n   * when dropping the event, we need to subtract the cursor position in the event.\n   *\n   * @param {Object} e The associated DOM event.\n   */\n  _getEventStart(e) {\n    const { timeStep, timeCellHeight, timeFrom, utils } = this._vuecal;\n    let { y } = utils.cell.getPosition(e);\n    y -= e.dataTransfer.getData(\"cursor-grab-at\") * 1;\n    return Math.round(y * timeStep / parseInt(timeCellHeight) + timeFrom);\n  }\n  /**\n   * On drop, update the event start and end date directly into the event.\n   *\n   * @param {Object} e The associated DOM event.\n   * @param {Object} event The event being dragged.\n   * @param {Object} transferData The transfer data from the HTML5 dragging event.\n   * @param {Date} cellDate The hovered cell starting date.\n   */\n  _updateEventStartEnd(e, event, transferData, cellDate) {\n    const eventDuration = transferData.duration * 1 || event.endTimeMinutes - event.startTimeMinutes;\n    let startTimeMinutes = Math.max(this._getEventStart(e), 0);\n    if (this._vuecal.snapToTime) {\n      const plusHalfSnapTime = startTimeMinutes + this._vuecal.snapToTime / 2;\n      startTimeMinutes = plusHalfSnapTime - plusHalfSnapTime % this._vuecal.snapToTime;\n    }\n    event.startTimeMinutes = startTimeMinutes;\n    event.start = new Date(new Date(cellDate).setMinutes(startTimeMinutes));\n    event.endTimeMinutes = Math.min(startTimeMinutes + eventDuration, 24 * 60);\n    event.end = new Date(new Date(cellDate).setMinutes(event.endTimeMinutes));\n  }\n  /**\n   * On event drag start, only possible if editableEvent is true.\n   * /!\\ This is using the native HTML5 drag & drop, not supported on touch devices.\n   *\n   * @param {Object} e The associated DOM event.\n   * @param {Object} event The event being dragged.\n   */\n  eventDragStart(e, event) {\n    if (e.target.nodeType === 3) return e.preventDefault();\n    e.dataTransfer.dropEffect = \"move\";\n    e.dataTransfer.setData(\"event\", JSON.stringify(event));\n    e.dataTransfer.setData(\"cursor-grab-at\", e.offsetY);\n    const { clickHoldAnEvent } = this._vuecal.domEvents;\n    setTimeout(() => {\n      clickHoldAnEvent._eid = null;\n      clearTimeout(clickHoldAnEvent.timeoutId);\n      event.deleting = false;\n    }, 0);\n    this._vuecal.domEvents.dragAnEvent._eid = event._eid;\n    dragging._eid = event._eid;\n    dragging.fromVueCal = this._vuecal._.uid;\n    event.dragging = true;\n    setTimeout(() => event.draggingStatic = true, 0);\n    viewChanged = false;\n    viewBeforeDrag = { id: this._vuecal.view.id, date: this._vuecal.view.startDate };\n    cancelViewChange = true;\n  }\n  /**\n   * On event drag end, when releasing the event.\n   *\n   * @param {Object} event The event being dragged.\n   */\n  eventDragEnd(event) {\n    this._vuecal.domEvents.dragAnEvent._eid = null;\n    dragging._eid = null;\n    event.dragging = false;\n    event.draggingStatic = false;\n    const { fromVueCal, toVueCal } = dragging;\n    if (toVueCal && fromVueCal !== toVueCal) this._vuecal.utils.event.deleteAnEvent(event);\n    dragging.fromVueCal = null;\n    dragging.toVueCal = null;\n    if (viewChanged && cancelViewChange && viewBeforeDrag.id) this._vuecal.switchView(viewBeforeDrag.id, viewBeforeDrag.date, true);\n  }\n  /**\n   * On cell/split enter with a dragging event.\n   * Highlight the cell, and if on `years`, `year`, `month` view,\n   * set a timer to go deeper on drag hold over this cell.\n   *\n   * @param {Object} e The associated DOM event.\n   * @param {Object} cell The cell component's $data.\n   * @param {Date} cellDate The hovered cell starting date.\n   */\n  cellDragEnter(e, cell, cellDate) {\n    const target = e.currentTarget;\n    if (e.currentTarget.contains(e.relatedTarget)) return;\n    if (target === dragOverCell.el || !target.className.includes(\"vuecal__cell-content\")) return false;\n    if (dragOverCell.el) dragOverCell.cell.highlighted = false;\n    dragOverCell = { el: target, cell, timeout: clearTimeout(dragOverCell.timeout) };\n    cell.highlighted = true;\n    if ([\"years\", \"year\", \"month\"].includes(this._vuecal.view.id)) {\n      dragOverCell.timeout = setTimeout(() => this._vuecal.switchToNarrowerView(cellDate), 2e3);\n    }\n  }\n  /**\n   * On cell/split drag over, highlight the cell being hovered,\n   * Useful when starting to drag event on the same cell/split it's in.\n   * Warning: This is fired repeatedly as long as you stay over this cell/split.\n   *\n   * @param {Object} e The associated DOM event.\n   * @param {Object} cell The cell component's $data.\n   * @param {Date} cellDate The hovered cell starting date.\n   * @param {Number|String} split The optional split being hovered if any.\n   */\n  cellDragOver(e, cell, cellDate, split) {\n    e.preventDefault();\n    cell.highlighted = true;\n    if (split || split === 0) cell.highlightedSplit = split;\n  }\n  /**\n   * When event drag leaves a cell/split.\n   * Remove the cell/split highlighted state.\n   * Warning: cell dragleave event happens AFTER another cell dragenter!\n   *\n   * @param {Object} e The associated DOM event.\n   * @param {Object} cell The cell component's $data.\n   */\n  cellDragLeave(e, cell) {\n    e.preventDefault();\n    if (e.currentTarget.contains(e.relatedTarget)) return;\n    cell.highlightedSplit = false;\n    if (dragOverCell.cell === cell) {\n      clearTimeout(dragOverCell.timeout);\n      dragOverCell = { el: null, cell: null, timeout: null };\n      cell.highlighted = false;\n    }\n  }\n  /**\n   * On successful event drop into a cell/split.\n   * Change the event start and end time and remove the event dragging state\n   * and cell/split highlighted state.\n   *\n   * @param {Object} e The associated DOM event.\n   * @param {Object} cell The cell component's $data.\n   * @param {Date} cellDate The hovered cell starting date.\n   * @param {Number|String} split The optional split being dropped into, if any.\n   */\n  cellDragDrop(e, cell, cellDate, split) {\n    e.preventDefault();\n    clearTimeout(dragOverCell.timeout);\n    dragOverCell = { el: null, cell: null, timeout: null };\n    const transferData = JSON.parse(e.dataTransfer.getData(\"event\") || \"{}\");\n    let event, addToView;\n    if (dragging.fromVueCal !== this._vuecal._.uid) {\n      const { _eid, start, end, duration, ...cleanTransferData } = transferData;\n      event = this._vuecal.utils.event.createAnEvent(cellDate, duration, { ...cleanTransferData, split });\n    } else {\n      event = this._vuecal.view.events.find((evt) => evt._eid === dragging._eid);\n      if (!event) {\n        event = this._vuecal.mutableEvents.find((evt) => evt._eid === dragging._eid);\n        addToView = !!event;\n      }\n      if (!event) {\n        const duration = transferData.endTimeMinutes - transferData.startTimeMinutes;\n        const { start, end, ...cleanTransferData } = transferData;\n        event = this._vuecal.utils.event.createAnEvent(cellDate, duration, { ...cleanTransferData, split });\n      }\n    }\n    const { start: oldDate, split: oldSplit } = event;\n    this._updateEventStartEnd(e, event, transferData, cellDate);\n    if (addToView) this._vuecal.addEventsToView([event]);\n    event.dragging = false;\n    if (split || split === 0) event.split = split;\n    cell.highlighted = false;\n    cell.highlightedSplit = null;\n    cancelViewChange = false;\n    dragging.toVueCal = this._vuecal._.uid;\n    const params = {\n      event: this._vuecal.cleanupEvent(event),\n      oldDate,\n      newDate: event.start,\n      ...(split || split === 0) && { oldSplit, newSplit: split },\n      originalEvent: this._vuecal.cleanupEvent(transferData),\n      external: !dragging.fromVueCal\n      // If external event, not coming from any Vue Cal.\n    };\n    this._vuecal.$emit(\"event-drop\", params);\n    this._vuecal.$emit(\"event-change\", { event: params.event, originalEvent: params.originalEvent });\n    setTimeout(() => {\n      if (dragging._eid) this.eventDragEnd(event);\n    }, 300);\n  }\n  /**\n   * On drag enter on a view button or on today, prev & next buttons.\n   * Sets a highlighted state on the hovered button, and go to requested view.\n   *\n   * @param {Object} e The associated DOM event.\n   * @param {String} id The id of the header element being hovered. One of:\n   *                    previous, next, today, years, year, month, week, day.\n   * @param {Object} headerData The header component's $data.\n   */\n  viewSelectorDragEnter(e, id, headerData) {\n    if (e.currentTarget.contains(e.relatedTarget)) return;\n    headerData.highlightedControl = id;\n    clearTimeout(changeViewTimeout);\n    changeViewTimeout = setTimeout(() => {\n      if ([\"previous\", \"next\"].includes(id)) {\n        this._vuecal[id]();\n        clearInterval(pressPrevOrNextInterval);\n        pressPrevOrNextInterval = setInterval(this._vuecal[id], holdOverTimeout);\n      } else if (id === \"today\") {\n        clearInterval(pressPrevOrNextInterval);\n        let viewId;\n        if (this._vuecal.view.id.includes(\"year\")) {\n          viewId = this._vuecal.enabledViews.filter((view) => !view.includes(\"year\"))[0];\n        }\n        this._vuecal.switchView(viewId || this._vuecal.view.id, new Date((/* @__PURE__ */ new Date()).setHours(0, 0, 0, 0)), true);\n      } else this._vuecal.switchView(id, null, true);\n      viewChanged = true;\n    }, holdOverTimeout);\n  }\n  /**\n   * On drag leave on a view button or on today, prev & next buttons.\n   * Removes the highlighted state on the hovered button, and cancel the timer to\n   * go to the requested view.\n   *\n   * @param {Object} e The associated DOM event.\n   * @param {String} id The id of the header element being hovered. One of:\n   *                    previous, next, today, years, year, month, week, day.\n   * @param {Object} headerData The header component's $data.\n   */\n  viewSelectorDragLeave(e, id, headerData) {\n    if (e.currentTarget.contains(e.relatedTarget)) return;\n    if (headerData.highlightedControl === id) {\n      headerData.highlightedControl = null;\n      if (changeViewTimeout) changeViewTimeout = clearTimeout(changeViewTimeout);\n      if (pressPrevOrNextInterval) pressPrevOrNextInterval = clearInterval(pressPrevOrNextInterval);\n    }\n  }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/vue-cal/dist/drag-and-drop.es.js\n");

/***/ })

}]);